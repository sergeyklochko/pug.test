const gulp = require('gulp');
const concat = require('gulp-concat');
const autoprefixer = require('gulp-autoprefixer');
const cleanCSS = require('gulp-clean-css');
const uglify = require('gulp-uglify');
const del = require('del');
const browserSync = require('browser-sync').create();

const conf = {
	dest: './build'
};

const cssFiles = [
	'./node_modules/normalize.css/normalize.css',
	'./src/css/some.css',
	'./src/css/other.css'
];

const jsFiles = [
	'./src/js/lib.js',
	'./src/js/some.js'
];

function styles(){
	return gulp.src(cssFiles)
				.pipe(concat('all.css'))
				.pipe(autoprefixer({
		            browsers: ['> 0.1%'],
		            cascade: false
		        }))
		        .pipe(cleanCSS({
		        	level: 2
		        }))
				.pipe(gulp.dest(conf.dest + '/css'))
				.pipe(browserSync.stream());
}

function scripts(){
	return gulp.src(jsFiles)
				.pipe(concat('all.js'))
				.pipe(uglify({
					toplevel: true
				}))
				.pipe(gulp.dest(conf.dest + '/js'))
				.pipe(browserSync.stream());
}

function watch(){
	browserSync.init({
        server: {
            baseDir: "./"
        },
        // tunnel: true
    });

	gulp.watch('./src/css/**/*.css', styles);
	gulp.watch('./src/js/**/*.js', scripts);
	gulp.watch('./*.html', browserSync.reload);
}

function clean(){
	return del(['build/*']);
}

gulp.task('styles', styles);
gulp.task('scripts', scripts);
gulp.task('watch', watch);

let build = gulp.series(clean, 
						gulp.parallel(styles, scripts)
					);

gulp.task('build', build);

gulp.task('dev', gulp.series('build', 'watch'));

function changeFolder(){
	return new Promise((resolve, reject) => {
		conf.dest = 'other-build';
		resolve();
	});
}

gulp.task('other', gulp.series(changeFolder, build));